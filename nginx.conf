lua_shared_dict bots 24k;

init_by_lua_block { 
    require "cjson";
}

server {
    listen 8080;
    listen [::]:8080;
    port_in_redirect off;

    resolver 127.0.0.11;
    autoindex off;

    server_name _;
    server_tokens off;

    root /app;
    gzip_static on;

    error_page 404 /404.html;
    location = /404.html {
        root /app;
        internal;
    }

    error_page 400 401 402 403 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 /400.html;
    location = /400.html {
        root /app;
        internal;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /app;
        internal;
    }

    location / {
        access_by_lua_block {
            -- send Dark Vistors event
            local visitsBody = {
                ["request_path"] = ngx.var.request_uri,
                ["request_method"] = ngx.var.request_method,
                ["request_headers"] = ngx.req.get_headers()
            }

            local visitsRes = ngx.location.capture(
                '/darkvisitors-proxy/visits', { 
                  method = ngx.HTTP_POST, 
                  body = require "cjson".encode(visitsBody)
            });

            if visitsRes.status ~= ngx.HTTP_OK then
                ngx.log(ngx.ERR, "failed to send visit event to Dark Visitors:")
                ngx.log(ngx.ERR, visitsRes.status)
                ngx.log(ngx.ERR, visitsRes.body)
            end

            -- check if our list of bots is cached 
            local bots = ngx.shared.bots
            local botlist, flags = bots:get("useragents")

            -- cache is empty/expired, refill it
            if botlist == nil then
                ngx.log(ngx.INFO, "botcache is empty, refilling...")
                local newbots = "|"        
                local robotsBody = {
                    ["agent_types"] = {
                        "AI Data Scraper",
                        "Undocumented AI Agent"
                    }
                }
                local robotsRes = ngx.location.capture(
                    '/darkvisitors-proxy/robots', { 
                      method = ngx.HTTP_POST, 
                      body = require "cjson".encode(robotsBody)
                });

                if robotsRes.status ~= ngx.HTTP_OK then
                    ngx.log(ngx.ERR, "failed to fetch robots.txt from Dark Visitors:")
                    ngx.log(ngx.ERR, robotsRes.status)
                    ngx.log(ngx.ERR, robotsRes.body)
                else
                    for bot in robotsRes.body:gmatch("User%-agent: (.-)\n") do
                        newbots = newbots..bot.."|"
                    end
                end
                ngx.log(ngx.INFO, "new botcache values: " .. newbots)

                local ttl = 60 * 60 * 24
                local succ, err, forcible = bots:set("useragents", newbots, ttl)
                if not succ then
                    ngx.log(ngx.ERR, "Failed to set bot user agent cache: " .. err)
                end

                botlist, flags = bots:get("useragents")
            end

            -- check request UA against bot list
            if botlist:find("|" .. ngx.var.http_user_agent .. "|", 1, true) then
                ngx.log(ngx.INFO, "Dark Visitors blocked known bot user agent: " .. ngx.var.http_user_agent)
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end
        }
    }

    location /darkvisitors-proxy {
        access_by_lua_block {
            if not ngx.req.is_internal() then
                ngx.log(ngx.ERR, 'internal only!')
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end
        }

        proxy_pass_request_headers off;
        proxy_set_header Authorization "Bearer ${DARK_VISITORS_TOKEN}";
        proxy_set_header Content-Type "application/json";
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        location = /darkvisitors-proxy/visits {
            proxy_pass https://api.darkvisitors.com/visits;
        }

        location = /darkvisitors-proxy/robots {
            proxy_pass https://api.darkvisitors.com/robots-txts;
        }
    }
}